function [VarParam Param fnameParams] = getPsychStimParameters(fname,DAQFILEPATH, LOGFILEPATH)
% function [VarParam Param fnameParams] = getPsychStimParameters(fname,DAQFILEPATH, LOGFILEPATH)
%
% Will load containing saved parameters from PsychStimController associated with supplied DAQ file
% (generated by SaveParams function in PsychStimControl).
% If Param filename is not specified in the .mat file associated with the
% DAQ file, will find the Param file with the find the Param file MOST
% likely to be associated with the DAQ file based on the the "create file"
% time.
%
% Input
% fname - DAQ file name
% containing saved parameters from PsychStimController
% (generated by SaveParams function in PsychStimController)
%
% Outputs
%  VarParam (a struct of length 1 or 2 dependon on how many
% paramters varied)
%    VarParam(i).Values = vector values
%    VarParam(i).Name = string describing paramters that varies
%  Param.sDescAdditional
%            string that vary in size with information about the stimuli
%            features that did NOT vary
%         .StimDuration
%         .Baseline time after StimDuration when screen was grayed out
% BA110909
%

% TO DO Should probably impose a different limit on how far in the future
% and in the past the Params file should be from the daq file


bdebugParam = 0; % set to 1 to see if any errors in guessing the correct Param file exist (only works for files where _SFile exists)

sAPPENDEX = '_SFile';
ftemp = fullfile(DAQFILEPATH,[fname sAPPENDEX]);

% SRO temp code for dual LGN and V1 recording
if isempty(dir([ftemp '.*']))
    k = findstr('V1',ftemp);
    tempstr = ftemp(k+2:end);
    ftemp(k:end) = '';
    ftemp = [ftemp 'LGN' tempstr];
end

if ~bdebugParam & ~isempty(dir([ftemp '.*']))
    load(ftemp);
    ind = findstr(params.sfilename,'\');
    if length(ind) > 1
        temp = params.sfilename(ind(end-1)+1:end);  % Get just datefolder and filename
    else
        temp = params.sfilename;
    end
    fnameParams = fullfile(LOGFILEPATH,temp);
else
    fnameParams = findCandidateParamFile(fname,DAQFILEPATH,LOGFILEPATH);
    
    if bdebugParam % debug
        try
            load(ftemp);
            truefname = fullfile(LOGFILEPATH,params.sfilename);
            if ~strcmp(fnameParams,truefname)
                error('WRONG Params file is closest in time!!\n Right file: %s',truefname);
            end
        catch % no SFile exists
        end
    end
    
end

[VarParam Param] = helperLoadParam(fnameParams);
end
function [VarParam Param] = helperLoadParam(fnameParams)
load(fnameParams);


if exist('psychstimctrlparams') % 121509 new format is 1 struct rather than multiple variable
    fldnames = fieldnames(psychstimctrlparams);
    for i = 1:size(fldnames,1) % convert fields of struct into variables
        s = sprintf('%s = psychstimctrlparams.%s;',fldnames{i},fldnames{i});
        eval(s);
    end
end
i=0;

vStimCtlr = any(strcmp('stimType',fldnames));   % SRO added for special stimuli

if vStimCtlr
    VarParam.Name = psychstimctrlparams.stimType;
    VarParam.Values = NaN;
else
    if 1 % Var1Val>1
        i=i+1;
        VarParam(i).Name = Var1Str{Var1Val};
        variscircular = 0;
        if (Var1Val == 2) && (Start1 == 0) && (Stop1 == 360)
            variscircular = 1; % orientation
        end
        
        if LinLog1==1
            if variscircular
                VarParam(i).Values = linspace(Start1, Stop1, nSteps1+1);
                VarParam(i).Values = VarParam(i).Values(1:end-1);
            else
                VarParam(i).Values = linspace(Start1, Stop1, nSteps1);
            end
        else
            VarParam(i).Values = logspace(log10(Start1), log10(Stop1), nSteps1);
        end
        
        if Var2Val>1
            i = i+1;
            VarParam(i).Name = Var2Str{Var2Val};
            variscircular = 0;
            if (Var2Val == 2) && (Start2 == 0) && (Stop2 == 360)
                variscircular = 1; % orientation
            end
            
            if LinLog2==1
                if variscircular
                    VarParam(i).Values = linspace(Start2, Stop2, nSteps2+1);
                    VarParam(i).Values = VarParam(i).Values(1:end-1);
                else
                    VarParam(i).Values = linspace(Start2, Stop2, nSteps2);
                end
            else
                VarParam(i).Values = logspace(log10(Start2), log10(Stop2), nSteps2);
            end
        end
    end
    
end

if vStimCtlr
    Param = psychstimctrlparams;
else
    Param.StimulusName = StimulusStr{StimulusNum};
    Param.StimDuration = Duration;
    if blankbkgrnd
        Param.Baseline = WaitInterval;
    else
        Param.Baseline =nan;
    end
    if exist('maskstr','var') % backward compatibility with files that doesn't have this param
        Param.Mask = maskstr{popmenuMask}(1:3);
    else
        Param.Mask = popmenuMask;
    end
    Param.MaskPossize = [ str2num(maskcenterx) str2num(maskcentery) str2num(maskradiusx) str2num(maskradiusy)];
    
    if exist('freq','var') % backward compatibilyt with files that doesn't have this param
        Param.spfreq = unique(freq(:));
    else
        Param.spfreq = unique(spfreq(:));
    end
    Param.tempFreq = unique(TempFreq(:));
    Param.orient = unique(orient(:));
    Param.contrast = unique(contrast(:));
    Param.length = unique(length(:));
    Param.speed = unique(speed(:));
    Param.phase = unique(phase(:));
    Param.positionXY  = [unique(positionX) unique(positionY)];
    Param.blankbkgrnd  = blankbkgrnd;
    Param.randomize  = randomize;
    Param.squaregratings  = squaregratings;
    if ~isempty(findstr(Param.StimulusName, 'Movies'))
        temp = strfind(MovieName,'\');
        Param.MovieName = MovieName(temp(end)+1:end);
        Param.MovieMag = MovieMag;
        Param.MovieRate = MovieRate;
    else
        Param.MovieName = [];
        Param.MovieMag = [];
        Param.MovieRate = [];
    end
    Param.blankstim  = blankstim;
    Param.fullflicker  = FullFlicker;
    
    Param.screensz  = [PixelsX PixelsY];
    Param.screendist  = ScreenDist;
    
    if popmenuMask==4 % BA added binary indicator of mask independent of type to make life easier
        Param.bMask =0;
    else    Param.bMask =1;end
    
    
    % String with SELECTED Extra bits of  information about stimulus
    Param.sDescAdditional = '';
    if squaregratings==1
        Param.sDescAdditional = sprintf('%sSq. Grat', Param.sDescAdditional);
    end
    Param.sDescAdditional = sprintf('%s Mask %s\n', Param.sDescAdditional,num2str(Param.Mask));
    
    if max(size(unique(Param.spfreq)))==1
        Param.sDescAdditional = sprintf('%sSf %1.1f cpd\n', Param.sDescAdditional, Freq0);
    end
    if max(size(unique(Param.tempFreq )))==1
        Param.sDescAdditional = sprintf('%sTf %1.1f Hz\n', Param.sDescAdditional, TempFreq0);
    end
    if max(size(unique(Param.orient)))==1
        Param.sDescAdditional = sprintf('%s%1.0f Deg\n', Param.sDescAdditional, Orient0);
    end
    
end

end
function fnameParams  = findCandidateParamFile(sfilename,DAQFILEPATH,LOGFILEPATH)
% first check if _SFile exists

% find Param file with time stamp closest  with closes time (_SFile doesn't exit)

%   This approach has several problems
% 1 the Creation time of DAQ file is when start acq button is pushed, but
% the Params file from PsychSC is created when the Run is pushed
% - so the Params file with the nearest time to the Start could be the
% NEXT Run if Stim Controller were running for awhile before DAQ file
% started acquiring
% This is not an unlikely case In fact this could happen any time where you are acquiring files sequentiallyl.
% the time of the later files could be closer to the next rather than the
% previous Stimulus.
% At would be nice to avoid this by requiring that the PsychSC Param file
% was created before the DAQ file but that never happens, because DAQ is
% started first (and triggered by PsychSC)
%
% if one assumes that one never analyzes sequentila DAQ files without the
% first. then there will be no problem as long as the acq time is longer
% than the wait between Start and Run being pressed.
%
% There doesn't seem to be a good solution, so it seems best to just
% report when time different between files is large and make it easy to
% try Param file from the next best time
%


% get create time for DAQ data
if isempty(strfind(sfilename,'.'))
    sfilename = [sfilename '.daq'];
end
sdata = getFileTime(fullfile(DAQFILEPATH,sfilename));

% new version of
% getFileTimeshould not require this fix
% if isDayLightSavingsTime % correct for DST
%     sdata.Creation = sdata.Creation+[0 0 0 1 0 0];
% end

% deal with daylight savings time
% get two Param files that were modified
tempfiles = dirc(fullfile(LOGFILEPATH,datestr(sdata.Creation,1),'*.mat'),'ae','d');
tempfiles = tempfiles(cellfun(@length, tempfiles(:,1))==19,[2 3 4]); % take only files that are 19 characters long (to exclude non-param save files)
% sort Param files by time relative to daq file
temp = cellfun(@datenum,cellstr(tempfiles(:,3)))-datenum(sdata.Creation);
[junk ind] = sort(abs(temp));
sortedtempfiles = tempfiles(ind,:);

% get time in format that is easier to present in minutes and secs
temp2 = cell2mat(cellfun(@datevec,cellstr(tempfiles(:,3)),'UniformOutput',0))-repmat(sdata.Creation,size(tempfiles,1),1);

stemp = sprintf('DAQ files found:\n');
stemp = sprintf('%s*******************************\n\t%s\t%s',stemp,sfilename,datestr(sdata.Creation));
display(stemp)
stemp = sprintf('PsychStimController Param files found:\n');
for i = 1:2
    stemp = sprintf('%s\t%s\t%s\t\t%d:%d:%d\n',stemp,sortedtempfiles{i,1},sortedtempfiles{i,3},temp2(ind(i),4),temp2(ind(i),5),round(temp2(ind(i),6)));
end
display(stemp)

stemp = sprintf(' PRESS: \n\t Return to ACKNOWLEDGE and use 1st guess\n\t 2 to use 2nd closest Param file\n');
if temp2(ind(1),5)> 0.5 % warning if daq and param files differ by more than a half min
    display('Watch out POSSIBLE mismatch between DAQ and PychStimControl parameters files because are far apart in time\n Can Try 2nd closest Param file')
end
ui = input(stemp);

i =1;
if strcmp(ui,'2');
    i = 2;
end
fnameParams = fullfile(LOGFILEPATH,datestr(sdata.Creation,1),sortedtempfiles{i,1});
end